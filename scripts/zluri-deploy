#!/usr/bin/env bash
set -euo pipefail

# Configuration file path
DEPLOY_CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/zluri/deploy.conf"

# Load configuration
load_deploy_config() {
    if [[ -f "$DEPLOY_CONFIG_FILE" ]]; then
        # shellcheck disable=SC1090
        source "$DEPLOY_CONFIG_FILE"
    fi
}

# Save configuration
save_deploy_config() {
    local config_dir="$(dirname "$DEPLOY_CONFIG_FILE")"
    mkdir -p "$config_dir"
    
    cat > "$DEPLOY_CONFIG_FILE" <<EOF
# Zluri Deploy Configuration
# Generated on $(date)

# Default repository selection
DEFAULT_REPOS="${DEFAULT_REPOS:-workflow-service,v1-dashboard}"

# Default branch name
DEFAULT_BRANCH="${DEFAULT_BRANCH:-}"

# GitHub repository for deployments
DEPLOY_REPO="${DEPLOY_REPO:-ZluriHQ/centralized-deployment}"

# Workflow file name
WORKFLOW_FILE="${WORKFLOW_FILE:-deploy-feature-env.yaml}"

# Default workflow reference branch
WORKFLOW_REF="${WORKFLOW_REF:-feature/create-env-config}"

# Logging configuration
LOG_LEVEL="${LOG_LEVEL:-INFO}"
LOG_TO_FILE="${LOG_TO_FILE:-false}"
LOG_FILE_PATH="${LOG_FILE_PATH:-~/.config/zluri/deploy.log}"

# UI preferences
USE_COLORS="${USE_COLORS:-true}"
CONFIRM_ACTIONS="${CONFIRM_ACTIONS:-true}"

# Timeout settings
DEPLOYMENT_TIMEOUT="${DEPLOYMENT_TIMEOUT:-300}"
API_TIMEOUT="${API_TIMEOUT:-30}"
EOF
}

# Check for help flags
if [[ "${1:-}" == "help" || "${1:-}" == "--help" || "${1:-}" == "-h" ]]; then
    echo "Zluri Deploy - Feature Environment Deployment Tool"
    echo ""
    echo "DESCRIPTION:"
    echo "  This tool triggers feature environment deployments for Zluri repositories."
    echo "  It uses GitHub Actions to deploy multiple repositories with the same branch name."
    echo ""
    echo "IMPORTANT:"
    echo "  🔑 Keep the branch name consistent across ALL selected repositories"
    echo "  📋 All repos will be deployed using the same branch_name parameter"
    echo "  🎯 This ensures coordinated deployments across the entire stack"
    echo ""
    echo "WORKFLOW:"
    echo "  1. Select repositories to deploy (multi-select with TAB)"
    echo "  2. Enter the feature branch name (must exist in all selected repos)"
    echo "  3. Tool triggers GitHub Actions workflow automatically"
    echo ""
    echo "AVAILABLE REPOSITORIES:"
    echo "  • workflow-service"
    echo "  • v1-dashboard"
    echo "  • dashboard-api"
    echo "  • zluri-n8n"
    echo "  • integrations-v1"
    echo "  • bull-scheduler"
    echo "  • Integration-queue-consumer"
    echo "  • workflows-lambda"
    echo "  • agenda-project"
    echo "  • all (deploys all repositories)"
    echo ""
    echo "CONFIGURATION:"
    echo "  • Deploy config: $DEPLOY_CONFIG_FILE"
    echo "  • Last used branch and repos are saved for convenience"
    echo "  • Previous selections are pre-selected for convenience"
    echo ""
    echo "DEPENDENCIES:"
    echo "  • GitHub CLI (gh) - for triggering workflows"
    echo "  • skim (sk) - for interactive selection"
    echo ""
    echo "GITHUB ACTIONS WORKFLOW:"
    echo "  🔗 https://github.com/ZluriHQ/centralized-deployment/actions/workflows/deploy-feature-env.yaml"
    echo ""
    echo "EXAMPLES:"
    echo "  zluri deploy           # Interactive deployment"
    echo "  zluri deploy config    # Manage deployment configuration"
    echo "  zluri deploy help      # Show this help"
    echo ""
    echo "TIPS:"
    echo "  • Use TAB to multi-select repositories"
    echo "  • Press ENTER to confirm your selection"
    echo "  • Ensure the branch exists in all selected repositories"
    echo "  • Check the GitHub Actions page for deployment status"
    exit 0
fi

# Check for config command
if [[ "${1:-}" == "config" ]]; then
    shift
    zluri_deploy_config "$@"
    exit 0
fi

# Load configuration
load_deploy_config

# Set default values if not configured
REPO="${DEPLOY_REPO:-ZluriHQ/centralized-deployment}"
WORKFLOW_FILE="${WORKFLOW_FILE:-deploy-feature-env.yaml}"
CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/zluri/deploy-last.conf"

AVAILABLE_REPOS=(
  "workflow-service"
  "v1-dashboard"
  "dashboard-api"
  "zluri-n8n"
  "integrations-v1"
  "bull-scheduler"
  "Integration-queue-consumer"
  "workflows-lambda"
  "agenda-project"
  "all"
)

# --- Dependency check for sk and gh ---
if ! command -v gh >/dev/null 2>&1; then
  echo "❌ GitHub CLI not found. Install via Homebrew: brew install gh"
  exit 1
fi

if ! command -v sk >/dev/null 2>&1; then
  echo "❌ skim (sk) not found. Install via Homebrew: brew install skim"
  exit 1
fi

# --- Auth check ---
if ! gh auth status >/dev/null 2>&1; then
  echo "❌ GitHub CLI not authenticated. Trying to authenticate"
  gh auth login
  exit 1
fi

# --- Load last saved config ---
LAST_BRANCH=""
LAST_REPOS=""
if [[ -f "$CONFIG_FILE" ]]; then
  # shellcheck disable=SC1090
  source "$CONFIG_FILE"
fi

echo "======================================================="
echo " Select repos to deploy (TAB to multi-select, ENTER to confirm)"
echo "======================================================="

CHOICE_LIST=$(printf "%s\n" "${AVAILABLE_REPOS[@]}")
# Use configured default repos if no last repos are saved
PRESELECT_ITEMS=$(echo "${LAST_REPOS:-${DEFAULT_REPOS:-}}" | tr ',' '\n')

# --- Repo selection using sk ---
CHOICES=$(echo "$CHOICE_LIST" | sk --multi --bind "tab:toggle+down" --pre-select-items "$PRESELECT_ITEMS")

if [[ -z "$CHOICES" ]]; then
  echo "❌ No repos selected. Exiting."
  exit 1
fi

if echo "$CHOICES" | grep -q "^all$"; then
  SELECTED_REPOS="all"
else
  SELECTED_REPOS=$(echo "$CHOICES" | paste -sd "," -)
fi

# --- Branch input ---
read -rp "Enter feature branch name (branch_name) [${LAST_BRANCH:-${DEFAULT_BRANCH:-}}]: " BRANCH_NAME
BRANCH_NAME="${BRANCH_NAME:-${LAST_BRANCH:-${DEFAULT_BRANCH:-}}}"

if [[ -z "$BRANCH_NAME" ]]; then
  echo "❌ branch_name is required"
  exit 1
fi

# --- Save config ---
mkdir -p "$(dirname "$CONFIG_FILE")"
cat > "$CONFIG_FILE" <<EOF
LAST_BRANCH="$BRANCH_NAME"
LAST_REPOS="$SELECTED_REPOS"
EOF

# --- Trigger GitHub workflow ---
echo ""
echo "🚀 Triggering workflow..."
echo "  Repo:          $REPO"
echo "  Workflow file: $WORKFLOW_FILE"
echo "  branch_name:   $BRANCH_NAME"
echo "  repo_names:    $SELECTED_REPOS"
echo ""

gh workflow run "$WORKFLOW_FILE" \
  --repo "$REPO" \
  --ref "${WORKFLOW_REF:-feature/create-env-config}" \
  --field branch_name="$BRANCH_NAME" \
  --field repo_names="$SELECTED_REPOS"

# ----------------------
# Configuration Management
# ----------------------

zluri_deploy_config() {
    local cmd="${1:-show}"
    
    case "$cmd" in
        show|"")
            echo "📋 Current Deploy Configuration"
            echo "================================"
            echo "Config file: $DEPLOY_CONFIG_FILE"
            echo ""
            if [[ -f "$DEPLOY_CONFIG_FILE" ]]; then
                cat "$DEPLOY_CONFIG_FILE"
            else
                echo "No configuration file found."
                echo "Run 'zluri deploy config init' to create one."
            fi
            ;;
        init)
            echo "🔧 Initializing deploy configuration..."
            save_deploy_config
            echo "✅ Configuration created at: $DEPLOY_CONFIG_FILE"
            echo "   Edit this file to customize your deployment settings."
            ;;
        edit)
            if [[ -f "$DEPLOY_CONFIG_FILE" ]]; then
                ${EDITOR:-nano} "$DEPLOY_CONFIG_FILE"
            else
                echo "❌ No configuration file found."
                echo "Run 'zluri deploy config init' to create one."
            fi
            ;;
        reset)
            echo "🔄 Resetting to default configuration..."
            rm -f "$DEPLOY_CONFIG_FILE"
            save_deploy_config
            echo "✅ Configuration reset to defaults."
            ;;
        help)
            echo "Deploy Configuration Management"
            echo ""
            echo "Commands:"
            echo "  show    Show current configuration"
            echo "  init    Create initial configuration file"
            echo "  edit    Edit configuration file"
            echo "  reset   Reset to default configuration"
            echo "  help    Show this help"
            ;;
        *)
            echo "Unknown config command: $cmd"
            echo "Use 'zluri deploy config help' for available commands."
            ;;
    esac
}
